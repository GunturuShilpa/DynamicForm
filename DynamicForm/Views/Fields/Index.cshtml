@model Core.Services.TemplateFields.Requests.FieldRequest

@{
    ViewBag.Title = "Form Controls";
}
<link href="~/lib/datatables/css/jquery.datatables.min.css" rel="stylesheet" />
<link href="~/lib/sweetalert/css/sweetalert2.min.css" rel="stylesheet" />
@*<script src="~/lib/datatables/js/responsive.bootstrap.min.js"></script>*@

<style>
    .modal {
        background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
    }

    .error {
        color: red;
    }

    .button-group {
        display: flex;
    }

        .button-group .btn {
            flex: 0 0 auto;
            margin-right: 10px;
        }

</style>

<div class="row">
    <div class="col-md-12 col-sm-12 col-xs-12">
        <div class="x_panel">
            <div class="x_title">
                <h2 class="page-title">
                    @ViewBag.TemplateName - Controls
                    <button type="button" class="btn btn-info pull-right" data-toggle="modal" data-target="#add-field-model">
                        <span class="glyphicon glyphicon-plus"></span> Create
                    </button>
                </h2>
            </div>
            <div class="x_content">
                <div id="wait" class="spinner"></div>
                <table class="table table-striped table-bordered table-responsive" id="tbField" style="width:100%">
                    <thead>
                        <tr class="bg-secondary">
                            <th style="min-width:30px">Name</th>
                            <th style="min-width:30px">Control Type</th>
                            <th style="min-width:30px">Default Value</th>
                            <th style="max-width:40px">Required?</th>
                            <th style="max-width:30px">Status</th>
                            <th style="max-width:20px">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="tdField"></tbody>
                </table>
            </div>
        </div>

        <form id="create-form" name="createfield" asp-controller="Fields" asp-action="SaveField" method="post" novalidate
              data-ajax="true" data-ajax-method="post" data-ajax-complete="completedField" enctype="multipart/form-data" autocomplete="off">
            <div class="modal fade" id="add-field-model" role="dialog" aria-hidden="true" data-backdrop="static" data-keyboard="false" tabindex="-1">
                <div class="modal-dialog">
                    <!-- Modal content-->
                    <div class="modal-content">
                        <div class="modal-header bg-warning">                            
                            <button type="button" class="close" data-dismiss="modal" id="modelclose">x</button>
                            <h4 class="modal-title">Add Form Control</h4>
                        </div>
                        <div class="modal-body">

                            <div class="form-group">
                                <label class="required" for="FieldName">Name</label>
                                <input type="text" id="FieldName" class="form-control" asp-for="Name" />
                            </div>
                            <div class="form-group">
                                <label for="FieldDataType">Control Type</label>
                                <select name="ControlId" class="form-control" asp-for="ControlId" asp-items="@ViewBag.ControlTypes"></select>
                            </div>
                            <div class="form-group">
                                <label class="required" for="DefaultValue">Default Value</label>
                                <input type="text" id="DefaultValue" class="form-control" name="DefaultValue" asp-for="DefaultValue" />
                            </div>
                            <div class="form-group">
                                <label class="required" for="OrderNo">Ordinal</label>
                                <input type="number" id="OrderNo" class="form-control" name="OrderNo" asp-for="OrderNo" min="1" />
                            </div>
                            <div class="form-check">
                                <input type="checkbox" class="form-check-input" asp-for="IsRequired" />
                                <label class="form-check-label" for="IsRequired"> Required</label>
                            </div>
                            <div class="form-group">
                                <label class="required" for="RequiredMessage">Required Message</label>
                                <input type="text" class="form-control" asp-for="RequiredMessage" novalidate />
                            </div>
                            <div class="form-group">
                                <label class="required" for="RegExValue">RegEx Value</label>
                                <input type="text" class="form-control" asp-for="RegExValue" novalidate />
                            </div>
                            <div class="form-group">
                                <label class="required" for="RegExMessage">RegEx Message</label>
                                <input type="text" class="form-control" asp-for="RegExMessage" novalidate />
                            </div>
                            <input type="hidden" asp-for="FieldId" name="FieldId" />
                            <input type="hidden" value="@ViewBag.FormId" name="TemplateFormId" />
                        </div>
                        <div class="modal-footer">
                            <button class="btn btn-success" type="submit"><span class="glyphicon glyphicon-floppy-saved"></span> Create</button>
                            <button type="button" class="btn btn-danger" data-dismiss="modal" id="btnFieldClose"> <span class="glyphicon glyphicon-remove"></span> Close</button>
                        </div>
                    </div>
                </div>
            </div>
        </form>

        <div class="modal" id="update-field-model" role="dialog" aria-hidden="true" data-backdrop="static" data-keyboard="false" tabindex="-1">
        </div>

        <div class="modal" id="option-field-model" role="dialog" aria-hidden="true" data-backdrop="static" data-keyboard="false" tabindex="-1">
        </div>
    </div>
</div>

@section scripts
    {
    <!-- Jquery js -->
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.unobtrusive-ajax.min.js"></script>
    <script src="~/lib/sweetalert/js/sweetalert2.all.min.js"></script>
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    @*<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>*@

    <!-- Data tables js -->
    <script src="~/lib/datatables/js/jquery.dataTables.min.js"></script>
    <script src="~/lib/datatables/js/dataTables.buttons.min.js"></script>
    <script src="~/lib/datatables/js/dataTables.rowReorder.min.js"></script>
    <script src="~/lib/datatables/js/dataTables.responsive.min.js"></script>
    <script src="~/lib/datatables/js/responsive.bootstrap.min.js"></script>
    <script type="text/javascript">
        var templateFormFieldId = 0;
        $(document).ready(function () {
            bind();

            $('#create-form').validate({
                errorClass: 'error',
                rules: {
                    'Name': {
                        required: true
                    },
                    'DefaultValue': {
                        required: true
                    },
                    'OrderNo': {
                        required: true
                    }
                },
                messages: {
                    'Name': {
                        required: 'FieldName is required'
                    },
                    'DefaultValue': {
                        required: 'DefaultValue is required'
                    },
                    'OrderNo': {
                        required: 'OrderNo is required'
                    }
                },
                highlight: function (element) {
                    $(element).children().addClass('error')
                },
                unhighlight: function (element) {
                    $(element).children().removeClass('error')
                }
            });

            $('#btnFieldClose').click(function () {
                clearFieldCreate();
            });
        });
        completedField = function (xhr) {
            var responseObject = JSON.parse(xhr.responseText);
            if (!responseObject.error) {
                Swal.fire({
                    title: 'Template Field',
                    text: responseObject.message,
                    type: 'success',
                    allowOutsideClick: false
                }).then(function () {
                    $('#add-field-model').hide();
                    oTable = $('#tbField').DataTable();
                    oTable.draw();
                });
                $('#btnFieldClose').click();
                clearFieldCreate();
            }
            else if (responseObject.error && responseObject.duplicateFiled) {
                Swal.fire({
                    icon: 'error',
                    title: 'Template Field',
                    text: responseObject.message,
                    type: 'error',
                    allowOutsideClick: false
                });
                $('#btnFormClose').click();
                clearFieldCreate();
            }
            else {
                Swal.fire({
                    icon: 'error',
                    title: 'Template Field',
                    text: 'Oops!! Something went wrong!',
                    type: 'error',
                    allowOutsideClick: false
                });
            }
        };

        updatedField = function (xhr) {
            var rtn = JSON.parse(xhr.responseText);
            if (rtn.error == false) {
                Swal.fire({
                    title: 'Template Field',
                    text: rtn.message,
                    type: 'success',
                    allowOutsideClick: false
                }).then(function () {
                    $('#update-field-model').hide();
                    oTable = $('#tbField').DataTable();
                    oTable.draw();
                });
                $('#btnUpdateFieldClose').click();
                clearFieldUpdate();
            } else if (rtn.error && rtn.duplicateFiled) {
                Swal.fire({
                    icon: 'error',
                    title: 'Template Field',
                    text: rtn.message,
                    type: 'error',
                    allowOutsideClick: false
                });
                $('#btnUpdateFieldClose').click();
                clearFieldUpdate();
            }
            else {
                Swal.fire({
                    icon: 'error',
                    title: 'Template Field',
                    text: 'Oops!! Something Went Wrong!',
                    type: 'error',
                    allowOutsideClick: false
                });
            }
        };

        function clearFieldCreate() {
            $('.field-validation-error').empty();
            var frm = document.getElementsByName('createfield')[0];
            frm.reset();
        }
        function clearFieldUpdate() {
            $('.field-validation-error').empty();
            var frm = document.getElementsByName('editfield')[0];
            frm.reset();
        }


        function bind() {
            $("#tbField").DataTable({
                "processing": true, // for show progress bar
                "serverSide": true,
                "filter": true, // this is for disable filter (search box)
                "orderMulti": false, // for disable multiple column at once
                "ajax": {
                    "url": '@Url.Action("GetAllFields", "Fields", new { id = ViewBag.FormId })',
                    "type": "POST",
                    headers: { "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val() },
                    "datatype": "json"
                },
                "columnDefs": [{
                    "targets": '_all',
                    "defaultContent": ""
                }],
                "columns": [
                    { "data": "name", "name": "Name", "autoWidth": true },
                    { "data": "controlName", "name": "ControlName", "autoWidth": true },
                    { "data": "defaultValue", "name": "DefaultValue", "autoWidth": true },
                    {
                        "autoWidth": true,
                        "name": "isRequired",
                        "render": function (data, type, row) {
                            if (row.isRequired) {
                                return "<span class='text-primary'>Yes</span>";
                            }
                            else {
                                return "<span class='text-danger'>No</span>";
                            }
                        }
                    },
                    {
                        "autoWidth": true,
                        "name": "status",
                        "render": function (data, type, row) {
                            if (row.status == 1) {
                                return "<span class='text-primary'>Active</span>";
                            }
                            else if (row.status == 2) {
                                return "<span class='text-success'>Incomplete</span>";
                            }
                            else if (row.status == 3) {
                                return "<span class='text-warning'>Withheld</span>";
                            }
                            else if (row.status == 4) {
                                return "<span class='textdanger'>Deleted</span>";
                            }
                            else {
                                return "<span class='text-danger'></span>";
                            }
                        }
                    },
                    {
                        'bSortable': false, "autoWidth": true,
                        "render": function (data, type, row) {
                            var html = "";
                            if (row.status == 1) {
                                html += '<div class="button-group">';
                                html += '<a type="button" data-toggle="modal" data-target="#update-field-model" class="btn btn-xs btn-success" onclick="editFieldProperty(\'' + row.id + '\')">Edit</a>';
                                html += '<a type="button" class="btn btn-xs btn-danger" title="Delete Field" onclick="deleteField(\'' + row.id + '\')">Delete</a>';
                                if (row.controlName == "Select" || row.controlName == "CheckBox" || row.controlName == "RadioButtonList" || row.controlName == "CheckBoxList") {
                                    html += '<a type="button" data-toggle="modal" data-target="#option-field-model" class="btn btn-xs btn-info" onclick="optionFieldsModel(\'' + row.id + '\')">Options</a>';
                                }
                                html += '</div>';
                            }
                            return html;
                        }
                    }
                ]
            });
        }


        function editFieldProperty(id) {
            $.ajax({
                url: '@Url.Action("GetFieldPropertiesById", "Fields")?id=' + id,
                type: 'get',
                headers: { "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val() },
                success: (result) => {
                    $('#update-field-model').html(result);
                }
            });
        }
        function optionFieldsModel(id) {
            templateFormFieldId = id;
            $.ajax({
                url: '@Url.Action("AddOptions", "FieldOptions")',
                type: 'get',
                headers: { "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val() },
                success: (result) => {
                    $('#option-field-model').html(result);
                }
            });
        }

        function addFieldOptions() {
            var options = [];
            $("input[name=CreateTextbox]").each(function () {
                var val = $(this).val();
                if (val != '' && val != null)
                    options.push(val);
            });
            let formData = {
                templateFormFieldId: templateFormFieldId,
                optionValues: options,
            }
            $.ajax({
                url: '@Url.Action("SaveOptions", "FieldOptions")',
                type: "POST",
                data: formData,
                success: function (response) {
                    if (!response.error) {
                        Swal.fire({
                            title: 'Form Field Options',
                            text: response.message,
                            type: 'success',
                            allowOutsideClick: false
                        }).then(function () {
                            location.reload();
                        });
                        $('#btnFieldOptionsClose').click();

                    }
                    else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Form Field Options',
                            text: 'Oops!! Something Went Wrong!',
                            type: 'error',
                            allowOutsideClick: false
                        });
                    }
                },
                error: function (request, status, error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Form Field Options',
                        text: 'Oops!! Something Went Wrong!',
                        type: 'error',
                        allowOutsideClick: false
                    });
                }
            });
        }

        function deleteField(id) {
            Swal.fire({
                title: "Confirmation",
                text: "Are you sure you want to delete?",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!',
                showLoaderOnConfirm: true,
                animation: !1,
                preConfirm: function () {
                    return new Promise(function (resolve) {
                        $.ajax({
                            url: '@Url.Action("DeleteForm", "Fields")?id=' + id,
                            type: 'POST',
                            headers: { "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val() },
                            dataType: 'json'
                        })
                            .done(function (response) {
                                oTable = $('#tbField').DataTable();
                                oTable.draw();
                                if (response.error == false) {
                                    Swal.fire('Deleted!', response.message, 'success')
                                }
                                else {
                                    Swal.fire('Oops...', response.message, 'error')
                                }
                            })
                            .fail(function () {
                                Swal.fire('Oops...', response.message, 'error')
                            });
                    });
                },
            });
        }
    </script>
    }
